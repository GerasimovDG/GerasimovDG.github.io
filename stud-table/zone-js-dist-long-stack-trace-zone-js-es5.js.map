{"version":3,"sources":["zone-js-dist-long-stack-trace-zone-js-es5.js","webpack:///node_modules/zone.js/dist/long-stack-trace-zone.js"],"names":[],"mappings":"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","file":"x","sourcesContent":["(window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || []).push([[\"zone-js-dist-long-stack-trace-zone-js\"],{\n\n/***/ \"./node_modules/zone.js/dist/long-stack-trace-zone.js\":\n/*!************************************************************!*\\\n  !*** ./node_modules/zone.js/dist/long-stack-trace-zone.js ***!\n  \\************************************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;/**\n * @license Angular v0.10.2\n * (c) 2010-2019 Google LLC. https://angular.io/\n * License: MIT\n */\n(function (factory) {\n     true ? !(__WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :\n\t\t\t\t__WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) :\n        undefined;\n}(function () {\n    'use strict';\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * @fileoverview\n     * @suppress {globalThis}\n     */\n    var NEWLINE = '\\n';\n    var IGNORE_FRAMES = {};\n    var creationTrace = '__creationTrace__';\n    var ERROR_TAG = 'STACKTRACE TRACKING';\n    var SEP_TAG = '__SEP_TAG__';\n    var sepTemplate = SEP_TAG + '@[native]';\n    var LongStackTrace = /** @class */ (function () {\n        function LongStackTrace() {\n            this.error = getStacktrace();\n            this.timestamp = new Date();\n        }\n        return LongStackTrace;\n    }());\n    function getStacktraceWithUncaughtError() {\n        return new Error(ERROR_TAG);\n    }\n    function getStacktraceWithCaughtError() {\n        try {\n            throw getStacktraceWithUncaughtError();\n        }\n        catch (err) {\n            return err;\n        }\n    }\n    // Some implementations of exception handling don't create a stack trace if the exception\n    // isn't thrown, however it's faster not to actually throw the exception.\n    var error = getStacktraceWithUncaughtError();\n    var caughtError = getStacktraceWithCaughtError();\n    var getStacktrace = error.stack ?\n        getStacktraceWithUncaughtError :\n        (caughtError.stack ? getStacktraceWithCaughtError : getStacktraceWithUncaughtError);\n    function getFrames(error) {\n        return error.stack ? error.stack.split(NEWLINE) : [];\n    }\n    function addErrorStack(lines, error) {\n        var trace = getFrames(error);\n        for (var i = 0; i < trace.length; i++) {\n            var frame = trace[i];\n            // Filter out the Frames which are part of stack capturing.\n            if (!IGNORE_FRAMES.hasOwnProperty(frame)) {\n                lines.push(trace[i]);\n            }\n        }\n    }\n    function renderLongStackTrace(frames, stack) {\n        var longTrace = [stack ? stack.trim() : ''];\n        if (frames) {\n            var timestamp = new Date().getTime();\n            for (var i = 0; i < frames.length; i++) {\n                var traceFrames = frames[i];\n                var lastTime = traceFrames.timestamp;\n                var separator = \"____________________Elapsed \" + (timestamp - lastTime.getTime()) + \" ms; At: \" + lastTime;\n                separator = separator.replace(/[^\\w\\d]/g, '_');\n                longTrace.push(sepTemplate.replace(SEP_TAG, separator));\n                addErrorStack(longTrace, traceFrames.error);\n                timestamp = lastTime.getTime();\n            }\n        }\n        return longTrace.join(NEWLINE);\n    }\n    // if Error.stackTraceLimit is 0, means stack trace\n    // is disabled, so we don't need to generate long stack trace\n    // this will improve performance in some test(some test will\n    // set stackTraceLimit to 0, https://github.com/angular/zone.js/issues/698\n    function stackTracesEnabled() {\n        // Cast through any since this property only exists on Error in the nodejs\n        // typings.\n        return Error.stackTraceLimit > 0;\n    }\n    Zone['longStackTraceZoneSpec'] = {\n        name: 'long-stack-trace',\n        longStackTraceLimit: 10,\n        // add a getLongStackTrace method in spec to\n        // handle handled reject promise error.\n        getLongStackTrace: function (error) {\n            if (!error) {\n                return undefined;\n            }\n            var trace = error[Zone.__symbol__('currentTaskTrace')];\n            if (!trace) {\n                return error.stack;\n            }\n            return renderLongStackTrace(trace, error.stack);\n        },\n        onScheduleTask: function (parentZoneDelegate, currentZone, targetZone, task) {\n            if (stackTracesEnabled()) {\n                var currentTask = Zone.currentTask;\n                var trace = currentTask && currentTask.data && currentTask.data[creationTrace] || [];\n                trace = [new LongStackTrace()].concat(trace);\n                if (trace.length > this.longStackTraceLimit) {\n                    trace.length = this.longStackTraceLimit;\n                }\n                if (!task.data)\n                    task.data = {};\n                if (task.type === 'eventTask') {\n                    // Fix issue https://github.com/angular/zone.js/issues/1195,\n                    // For event task of browser, by default, all task will share a\n                    // singleton instance of data object, we should create a new one here\n                    // The cast to `any` is required to workaround a closure bug which wrongly applies\n                    // URL sanitization rules to .data access.\n                    task.data = Object.assign({}, task.data);\n                }\n                task.data[creationTrace] = trace;\n            }\n            return parentZoneDelegate.scheduleTask(targetZone, task);\n        },\n        onHandleError: function (parentZoneDelegate, currentZone, targetZone, error) {\n            if (stackTracesEnabled()) {\n                var parentTask = Zone.currentTask || error.task;\n                if (error instanceof Error && parentTask) {\n                    var longStack = renderLongStackTrace(parentTask.data && parentTask.data[creationTrace], error.stack);\n                    try {\n                        error.stack = error.longStack = longStack;\n                    }\n                    catch (err) {\n                    }\n                }\n            }\n            return parentZoneDelegate.handleError(targetZone, error);\n        }\n    };\n    function captureStackTraces(stackTraces, count) {\n        if (count > 0) {\n            stackTraces.push(getFrames((new LongStackTrace()).error));\n            captureStackTraces(stackTraces, count - 1);\n        }\n    }\n    function computeIgnoreFrames() {\n        if (!stackTracesEnabled()) {\n            return;\n        }\n        var frames = [];\n        captureStackTraces(frames, 2);\n        var frames1 = frames[0];\n        var frames2 = frames[1];\n        for (var i = 0; i < frames1.length; i++) {\n            var frame1 = frames1[i];\n            if (frame1.indexOf(ERROR_TAG) == -1) {\n                var match = frame1.match(/^\\s*at\\s+/);\n                if (match) {\n                    sepTemplate = match[0] + SEP_TAG + ' (http://localhost)';\n                    break;\n                }\n            }\n        }\n        for (var i = 0; i < frames1.length; i++) {\n            var frame1 = frames1[i];\n            var frame2 = frames2[i];\n            if (frame1 === frame2) {\n                IGNORE_FRAMES[frame1] = true;\n            }\n            else {\n                break;\n            }\n        }\n    }\n    computeIgnoreFrames();\n}));\n\n\n/***/ })\n\n}]);\n//# sourceMappingURL=zone-js-dist-long-stack-trace-zone-js-es2015.js.map","/**\n * @license Angular v0.10.2\n * (c) 2010-2019 Google LLC. https://angular.io/\n * License: MIT\n */\n(function (factory) {\n    typeof define === 'function' && define.amd ? define(factory) :\n        factory();\n}(function () {\n    'use strict';\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * @fileoverview\n     * @suppress {globalThis}\n     */\n    var NEWLINE = '\\n';\n    var IGNORE_FRAMES = {};\n    var creationTrace = '__creationTrace__';\n    var ERROR_TAG = 'STACKTRACE TRACKING';\n    var SEP_TAG = '__SEP_TAG__';\n    var sepTemplate = SEP_TAG + '@[native]';\n    var LongStackTrace = /** @class */ (function () {\n        function LongStackTrace() {\n            this.error = getStacktrace();\n            this.timestamp = new Date();\n        }\n        return LongStackTrace;\n    }());\n    function getStacktraceWithUncaughtError() {\n        return new Error(ERROR_TAG);\n    }\n    function getStacktraceWithCaughtError() {\n        try {\n            throw getStacktraceWithUncaughtError();\n        }\n        catch (err) {\n            return err;\n        }\n    }\n    // Some implementations of exception handling don't create a stack trace if the exception\n    // isn't thrown, however it's faster not to actually throw the exception.\n    var error = getStacktraceWithUncaughtError();\n    var caughtError = getStacktraceWithCaughtError();\n    var getStacktrace = error.stack ?\n        getStacktraceWithUncaughtError :\n        (caughtError.stack ? getStacktraceWithCaughtError : getStacktraceWithUncaughtError);\n    function getFrames(error) {\n        return error.stack ? error.stack.split(NEWLINE) : [];\n    }\n    function addErrorStack(lines, error) {\n        var trace = getFrames(error);\n        for (var i = 0; i < trace.length; i++) {\n            var frame = trace[i];\n            // Filter out the Frames which are part of stack capturing.\n            if (!IGNORE_FRAMES.hasOwnProperty(frame)) {\n                lines.push(trace[i]);\n            }\n        }\n    }\n    function renderLongStackTrace(frames, stack) {\n        var longTrace = [stack ? stack.trim() : ''];\n        if (frames) {\n            var timestamp = new Date().getTime();\n            for (var i = 0; i < frames.length; i++) {\n                var traceFrames = frames[i];\n                var lastTime = traceFrames.timestamp;\n                var separator = \"____________________Elapsed \" + (timestamp - lastTime.getTime()) + \" ms; At: \" + lastTime;\n                separator = separator.replace(/[^\\w\\d]/g, '_');\n                longTrace.push(sepTemplate.replace(SEP_TAG, separator));\n                addErrorStack(longTrace, traceFrames.error);\n                timestamp = lastTime.getTime();\n            }\n        }\n        return longTrace.join(NEWLINE);\n    }\n    // if Error.stackTraceLimit is 0, means stack trace\n    // is disabled, so we don't need to generate long stack trace\n    // this will improve performance in some test(some test will\n    // set stackTraceLimit to 0, https://github.com/angular/zone.js/issues/698\n    function stackTracesEnabled() {\n        // Cast through any since this property only exists on Error in the nodejs\n        // typings.\n        return Error.stackTraceLimit > 0;\n    }\n    Zone['longStackTraceZoneSpec'] = {\n        name: 'long-stack-trace',\n        longStackTraceLimit: 10,\n        // add a getLongStackTrace method in spec to\n        // handle handled reject promise error.\n        getLongStackTrace: function (error) {\n            if (!error) {\n                return undefined;\n            }\n            var trace = error[Zone.__symbol__('currentTaskTrace')];\n            if (!trace) {\n                return error.stack;\n            }\n            return renderLongStackTrace(trace, error.stack);\n        },\n        onScheduleTask: function (parentZoneDelegate, currentZone, targetZone, task) {\n            if (stackTracesEnabled()) {\n                var currentTask = Zone.currentTask;\n                var trace = currentTask && currentTask.data && currentTask.data[creationTrace] || [];\n                trace = [new LongStackTrace()].concat(trace);\n                if (trace.length > this.longStackTraceLimit) {\n                    trace.length = this.longStackTraceLimit;\n                }\n                if (!task.data)\n                    task.data = {};\n                if (task.type === 'eventTask') {\n                    // Fix issue https://github.com/angular/zone.js/issues/1195,\n                    // For event task of browser, by default, all task will share a\n                    // singleton instance of data object, we should create a new one here\n                    // The cast to `any` is required to workaround a closure bug which wrongly applies\n                    // URL sanitization rules to .data access.\n                    task.data = Object.assign({}, task.data);\n                }\n                task.data[creationTrace] = trace;\n            }\n            return parentZoneDelegate.scheduleTask(targetZone, task);\n        },\n        onHandleError: function (parentZoneDelegate, currentZone, targetZone, error) {\n            if (stackTracesEnabled()) {\n                var parentTask = Zone.currentTask || error.task;\n                if (error instanceof Error && parentTask) {\n                    var longStack = renderLongStackTrace(parentTask.data && parentTask.data[creationTrace], error.stack);\n                    try {\n                        error.stack = error.longStack = longStack;\n                    }\n                    catch (err) {\n                    }\n                }\n            }\n            return parentZoneDelegate.handleError(targetZone, error);\n        }\n    };\n    function captureStackTraces(stackTraces, count) {\n        if (count > 0) {\n            stackTraces.push(getFrames((new LongStackTrace()).error));\n            captureStackTraces(stackTraces, count - 1);\n        }\n    }\n    function computeIgnoreFrames() {\n        if (!stackTracesEnabled()) {\n            return;\n        }\n        var frames = [];\n        captureStackTraces(frames, 2);\n        var frames1 = frames[0];\n        var frames2 = frames[1];\n        for (var i = 0; i < frames1.length; i++) {\n            var frame1 = frames1[i];\n            if (frame1.indexOf(ERROR_TAG) == -1) {\n                var match = frame1.match(/^\\s*at\\s+/);\n                if (match) {\n                    sepTemplate = match[0] + SEP_TAG + ' (http://localhost)';\n                    break;\n                }\n            }\n        }\n        for (var i = 0; i < frames1.length; i++) {\n            var frame1 = frames1[i];\n            var frame2 = frames2[i];\n            if (frame1 === frame2) {\n                IGNORE_FRAMES[frame1] = true;\n            }\n            else {\n                break;\n            }\n        }\n    }\n    computeIgnoreFrames();\n}));\n"]}